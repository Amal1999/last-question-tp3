
Terraform used the selected providers to generate the following execution
plan. Resource actions are indicated with the following symbols:
  [32m+[0m create[0m

Terraform will perform the following actions:

[1m  # azurerm_container_registry.acr[0m will be created
[0m  [32m+[0m[0m resource "azurerm_container_registry" "acr" {
      [32m+[0m[0m admin_enabled                 = false
      [32m+[0m[0m admin_password                = (sensitive value)
      [32m+[0m[0m admin_username                = (known after apply)
      [32m+[0m[0m encryption                    = (known after apply)
      [32m+[0m[0m georeplication_locations      = (known after apply)
      [32m+[0m[0m georeplications               = (known after apply)
      [32m+[0m[0m id                            = (known after apply)
      [32m+[0m[0m location                      = "westeurope"
      [32m+[0m[0m login_server                  = (known after apply)
      [32m+[0m[0m name                          = "demotf001acr"
      [32m+[0m[0m network_rule_set              = (known after apply)
      [32m+[0m[0m public_network_access_enabled = true
      [32m+[0m[0m resource_group_name           = "aks_terraform_rg"
      [32m+[0m[0m retention_policy              = (known after apply)
      [32m+[0m[0m sku                           = "Standard"
      [32m+[0m[0m trust_policy                  = (known after apply)
      [32m+[0m[0m zone_redundancy_enabled       = false
    }

[1m  # azurerm_kubernetes_cluster.aks[0m will be created
[0m  [32m+[0m[0m resource "azurerm_kubernetes_cluster" "aks" {
      [32m+[0m[0m dns_prefix                          = "terraform-aks"
      [32m+[0m[0m fqdn                                = (known after apply)
      [32m+[0m[0m id                                  = (known after apply)
      [32m+[0m[0m kube_admin_config                   = (known after apply)
      [32m+[0m[0m kube_admin_config_raw               = (sensitive value)
      [32m+[0m[0m kube_config                         = (known after apply)
      [32m+[0m[0m kube_config_raw                     = (sensitive value)
      [32m+[0m[0m kubernetes_version                  = "1.19.3"
      [32m+[0m[0m location                            = "westeurope"
      [32m+[0m[0m name                                = "terraform-aks"
      [32m+[0m[0m node_resource_group                 = (known after apply)
      [32m+[0m[0m private_cluster_enabled             = (known after apply)
      [32m+[0m[0m private_cluster_public_fqdn_enabled = false
      [32m+[0m[0m private_dns_zone_id                 = (known after apply)
      [32m+[0m[0m private_fqdn                        = (known after apply)
      [32m+[0m[0m private_link_enabled                = (known after apply)
      [32m+[0m[0m resource_group_name                 = "aks_terraform_rg"
      [32m+[0m[0m sku_tier                            = "Free"

      [32m+[0m[0m default_node_pool {
          [32m+[0m[0m availability_zones   = [
              [32m+[0m[0m "1",
              [32m+[0m[0m "2",
              [32m+[0m[0m "3",
            ]
          [32m+[0m[0m enable_auto_scaling  = false
          [32m+[0m[0m kubelet_disk_type    = (known after apply)
          [32m+[0m[0m max_pods             = (known after apply)
          [32m+[0m[0m name                 = "system"
          [32m+[0m[0m node_count           = 3
          [32m+[0m[0m node_labels          = (known after apply)
          [32m+[0m[0m orchestrator_version = (known after apply)
          [32m+[0m[0m os_disk_size_gb      = (known after apply)
          [32m+[0m[0m os_disk_type         = "Managed"
          [32m+[0m[0m os_sku               = (known after apply)
          [32m+[0m[0m type                 = "VirtualMachineScaleSets"
          [32m+[0m[0m ultra_ssd_enabled    = false
          [32m+[0m[0m vm_size              = "Standard_DS2_v2"
        }

      [32m+[0m[0m identity {
          [32m+[0m[0m principal_id = (known after apply)
          [32m+[0m[0m tenant_id    = (known after apply)
          [32m+[0m[0m type         = "SystemAssigned"
        }

      [32m+[0m[0m network_profile {
          [32m+[0m[0m dns_service_ip     = (known after apply)
          [32m+[0m[0m docker_bridge_cidr = (known after apply)
          [32m+[0m[0m load_balancer_sku  = "Standard"
          [32m+[0m[0m network_mode       = (known after apply)
          [32m+[0m[0m network_plugin     = "kubenet"
          [32m+[0m[0m network_policy     = (known after apply)
          [32m+[0m[0m outbound_type      = "loadBalancer"
          [32m+[0m[0m pod_cidr           = (known after apply)
          [32m+[0m[0m service_cidr       = (known after apply)
        }
    }

[1m  # azurerm_resource_group.rg[0m will be created
[0m  [32m+[0m[0m resource "azurerm_resource_group" "rg" {
      [32m+[0m[0m id       = (known after apply)
      [32m+[0m[0m location = "westeurope"
      [32m+[0m[0m name     = "aks_terraform_rg"
    }

[1m  # azurerm_role_assignment.role_acrpull[0m will be created
[0m  [32m+[0m[0m resource "azurerm_role_assignment" "role_acrpull" {
      [32m+[0m[0m id                               = (known after apply)
      [32m+[0m[0m name                             = (known after apply)
      [32m+[0m[0m principal_id                     = (known after apply)
      [32m+[0m[0m principal_type                   = (known after apply)
      [32m+[0m[0m role_definition_id               = (known after apply)
      [32m+[0m[0m role_definition_name             = "AcrPull"
      [32m+[0m[0m scope                            = (known after apply)
      [32m+[0m[0m skip_service_principal_aad_check = true
    }

[1mPlan:[0m 4 to add, 0 to change, 0 to destroy.
[0m
Changes to Outputs:
  [32m+[0m[0m acr_id           = (known after apply)
  [32m+[0m[0m acr_login_server = (known after apply)
  [32m+[0m[0m aks_fqdn         = (known after apply)
  [32m+[0m[0m aks_id           = (known after apply)
  [32m+[0m[0m aks_node_rg      = (known after apply)
[90m
â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€[0m

Saved the plan to: tfplan

To perform exactly these actions, run the following command to apply:
    terraform apply "tfplan"
[0m[1mazurerm_resource_group.rg: Refreshing state... [id=/subscriptions/9ae5c229-9413-4920-bd6d-4b8b0ea5d15d/resourceGroups/aks_terraform_rg][0m

Terraform used the selected providers to generate the following execution
plan. Resource actions are indicated with the following symbols:
  [32m+[0m create[0m
[31m-[0m/[32m+[0m destroy and then create replacement[0m

Terraform planned the following actions, but then encountered a problem:

[1m  # azurerm_kubernetes_cluster.aks[0m will be created
[0m  [32m+[0m[0m resource "azurerm_kubernetes_cluster" "aks" {
      [32m+[0m[0m dns_prefix                          = "terraform-aks"
      [32m+[0m[0m fqdn                                = (known after apply)
      [32m+[0m[0m id                                  = (known after apply)
      [32m+[0m[0m kube_admin_config                   = (known after apply)
      [32m+[0m[0m kube_admin_config_raw               = (sensitive value)
      [32m+[0m[0m kube_config                         = (known after apply)
      [32m+[0m[0m kube_config_raw                     = (sensitive value)
      [32m+[0m[0m kubernetes_version                  = "1.28.0"
      [32m+[0m[0m location                            = "northeurope"
      [32m+[0m[0m name                                = "terraform-aks"
      [32m+[0m[0m node_resource_group                 = (known after apply)
      [32m+[0m[0m private_cluster_enabled             = (known after apply)
      [32m+[0m[0m private_cluster_public_fqdn_enabled = false
      [32m+[0m[0m private_dns_zone_id                 = (known after apply)
      [32m+[0m[0m private_fqdn                        = (known after apply)
      [32m+[0m[0m private_link_enabled                = (known after apply)
      [32m+[0m[0m resource_group_name                 = "aks_terraform_rg"
      [32m+[0m[0m sku_tier                            = "Free"

      [32m+[0m[0m default_node_pool {
          [32m+[0m[0m availability_zones   = [
              [32m+[0m[0m "1",
              [32m+[0m[0m "2",
              [32m+[0m[0m "3",
            ]
          [32m+[0m[0m enable_auto_scaling  = false
          [32m+[0m[0m kubelet_disk_type    = (known after apply)
          [32m+[0m[0m max_pods             = (known after apply)
          [32m+[0m[0m name                 = "system"
          [32m+[0m[0m node_count           = 3
          [32m+[0m[0m node_labels          = (known after apply)
          [32m+[0m[0m orchestrator_version = (known after apply)
          [32m+[0m[0m os_disk_size_gb      = (known after apply)
          [32m+[0m[0m os_disk_type         = "Managed"
          [32m+[0m[0m os_sku               = (known after apply)
          [32m+[0m[0m type                 = "VirtualMachineScaleSets"
          [32m+[0m[0m ultra_ssd_enabled    = false
          [32m+[0m[0m vm_size              = "Standard_DS2_v2"
        }

      [32m+[0m[0m identity {
          [32m+[0m[0m principal_id = (known after apply)
          [32m+[0m[0m tenant_id    = (known after apply)
          [32m+[0m[0m type         = "SystemAssigned"
        }

      [32m+[0m[0m network_profile {
          [32m+[0m[0m dns_service_ip     = (known after apply)
          [32m+[0m[0m docker_bridge_cidr = (known after apply)
          [32m+[0m[0m load_balancer_sku  = "Standard"
          [32m+[0m[0m network_mode       = (known after apply)
          [32m+[0m[0m network_plugin     = "kubenet"
          [32m+[0m[0m network_policy     = (known after apply)
          [32m+[0m[0m outbound_type      = "loadBalancer"
          [32m+[0m[0m pod_cidr           = (known after apply)
          [32m+[0m[0m service_cidr       = (known after apply)
        }
    }

[1m  # azurerm_resource_group.rg[0m must be [1m[31mreplaced[0m
[0m[31m-[0m/[32m+[0m[0m resource "azurerm_resource_group" "rg" {
      [33m~[0m[0m id       = "/subscriptions/9ae5c229-9413-4920-bd6d-4b8b0ea5d15d/resourceGroups/aks_terraform_rg" -> (known after apply)
      [33m~[0m[0m location = "westeurope" [33m->[0m[0m "northeurope" [31m# forces replacement[0m[0m
        name     = "aks_terraform_rg"
      [31m-[0m[0m tags     = {} [90m-> null[0m[0m
    }

[1mPlan:[0m 2 to add, 0 to change, 1 to destroy.
[0m
Changes to Outputs:
  [32m+[0m[0m aks_fqdn    = (known after apply)
  [32m+[0m[0m aks_id      = (known after apply)
  [32m+[0m[0m aks_node_rg = (known after apply)
[0m[1mazurerm_resource_group.rg: Refreshing state... [id=/subscriptions/9ae5c229-9413-4920-bd6d-4b8b0ea5d15d/resourceGroups/aks_terraform_rg][0m

Terraform used the selected providers to generate the following execution
plan. Resource actions are indicated with the following symbols:
  [32m+[0m create[0m
[31m-[0m/[32m+[0m destroy and then create replacement[0m

Terraform will perform the following actions:

[1m  # azurerm_container_registry.acr[0m will be created
[0m  [32m+[0m[0m resource "azurerm_container_registry" "acr" {
      [32m+[0m[0m admin_enabled                 = false
      [32m+[0m[0m admin_password                = (sensitive value)
      [32m+[0m[0m admin_username                = (known after apply)
      [32m+[0m[0m encryption                    = (known after apply)
      [32m+[0m[0m georeplication_locations      = (known after apply)
      [32m+[0m[0m georeplications               = (known after apply)
      [32m+[0m[0m id                            = (known after apply)
      [32m+[0m[0m location                      = "northeurope"
      [32m+[0m[0m login_server                  = (known after apply)
      [32m+[0m[0m name                          = "tpgldevopsacr"
      [32m+[0m[0m network_rule_set              = (known after apply)
      [32m+[0m[0m public_network_access_enabled = true
      [32m+[0m[0m resource_group_name           = "aks_terraform_rg"
      [32m+[0m[0m retention_policy              = (known after apply)
      [32m+[0m[0m sku                           = "Standard"
      [32m+[0m[0m trust_policy                  = (known after apply)
      [32m+[0m[0m zone_redundancy_enabled       = false
    }

[1m  # azurerm_kubernetes_cluster.aks[0m will be created
[0m  [32m+[0m[0m resource "azurerm_kubernetes_cluster" "aks" {
      [32m+[0m[0m dns_prefix                          = "terraform-aks"
      [32m+[0m[0m fqdn                                = (known after apply)
      [32m+[0m[0m id                                  = (known after apply)
      [32m+[0m[0m kube_admin_config                   = (known after apply)
      [32m+[0m[0m kube_admin_config_raw               = (sensitive value)
      [32m+[0m[0m kube_config                         = (known after apply)
      [32m+[0m[0m kube_config_raw                     = (sensitive value)
      [32m+[0m[0m kubernetes_version                  = "1.28.0"
      [32m+[0m[0m location                            = "northeurope"
      [32m+[0m[0m name                                = "terraform-aks"
      [32m+[0m[0m node_resource_group                 = (known after apply)
      [32m+[0m[0m private_cluster_enabled             = (known after apply)
      [32m+[0m[0m private_cluster_public_fqdn_enabled = false
      [32m+[0m[0m private_dns_zone_id                 = (known after apply)
      [32m+[0m[0m private_fqdn                        = (known after apply)
      [32m+[0m[0m private_link_enabled                = (known after apply)
      [32m+[0m[0m resource_group_name                 = "aks_terraform_rg"
      [32m+[0m[0m sku_tier                            = "Free"

      [32m+[0m[0m default_node_pool {
          [32m+[0m[0m availability_zones   = [
              [32m+[0m[0m "1",
              [32m+[0m[0m "2",
              [32m+[0m[0m "3",
            ]
          [32m+[0m[0m enable_auto_scaling  = false
          [32m+[0m[0m kubelet_disk_type    = (known after apply)
          [32m+[0m[0m max_pods             = (known after apply)
          [32m+[0m[0m name                 = "system"
          [32m+[0m[0m node_count           = 3
          [32m+[0m[0m node_labels          = (known after apply)
          [32m+[0m[0m orchestrator_version = (known after apply)
          [32m+[0m[0m os_disk_size_gb      = (known after apply)
          [32m+[0m[0m os_disk_type         = "Managed"
          [32m+[0m[0m os_sku               = (known after apply)
          [32m+[0m[0m type                 = "VirtualMachineScaleSets"
          [32m+[0m[0m ultra_ssd_enabled    = false
          [32m+[0m[0m vm_size              = "Standard_DS2_v2"
        }

      [32m+[0m[0m identity {
          [32m+[0m[0m principal_id = (known after apply)
          [32m+[0m[0m tenant_id    = (known after apply)
          [32m+[0m[0m type         = "SystemAssigned"
        }

      [32m+[0m[0m network_profile {
          [32m+[0m[0m dns_service_ip     = (known after apply)
          [32m+[0m[0m docker_bridge_cidr = (known after apply)
          [32m+[0m[0m load_balancer_sku  = "Standard"
          [32m+[0m[0m network_mode       = (known after apply)
          [32m+[0m[0m network_plugin     = "kubenet"
          [32m+[0m[0m network_policy     = (known after apply)
          [32m+[0m[0m outbound_type      = "loadBalancer"
          [32m+[0m[0m pod_cidr           = (known after apply)
          [32m+[0m[0m service_cidr       = (known after apply)
        }
    }

[1m  # azurerm_resource_group.rg[0m must be [1m[31mreplaced[0m
[0m[31m-[0m/[32m+[0m[0m resource "azurerm_resource_group" "rg" {
      [33m~[0m[0m id       = "/subscriptions/9ae5c229-9413-4920-bd6d-4b8b0ea5d15d/resourceGroups/aks_terraform_rg" -> (known after apply)
      [33m~[0m[0m location = "westeurope" [33m->[0m[0m "northeurope" [31m# forces replacement[0m[0m
        name     = "aks_terraform_rg"
      [31m-[0m[0m tags     = {} [90m-> null[0m[0m
    }

[1m  # azurerm_role_assignment.role_acrpull[0m will be created
[0m  [32m+[0m[0m resource "azurerm_role_assignment" "role_acrpull" {
      [32m+[0m[0m id                               = (known after apply)
      [32m+[0m[0m name                             = (known after apply)
      [32m+[0m[0m principal_id                     = (known after apply)
      [32m+[0m[0m principal_type                   = (known after apply)
      [32m+[0m[0m role_definition_id               = (known after apply)
      [32m+[0m[0m role_definition_name             = "AcrPull"
      [32m+[0m[0m scope                            = (known after apply)
      [32m+[0m[0m skip_service_principal_aad_check = true
    }

[1mPlan:[0m 4 to add, 0 to change, 1 to destroy.
[0m
Changes to Outputs:
  [32m+[0m[0m acr_id           = (known after apply)
  [32m+[0m[0m acr_login_server = (known after apply)
  [32m+[0m[0m aks_fqdn         = (known after apply)
  [32m+[0m[0m aks_id           = (known after apply)
  [32m+[0m[0m aks_node_rg      = (known after apply)
[90m
â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€[0m

Saved the plan to: tfplan

To perform exactly these actions, run the following command to apply:
    terraform apply "tfplan"
[0m[1mazurerm_resource_group.rg: Refreshing state... [id=/subscriptions/9ae5c229-9413-4920-bd6d-4b8b0ea5d15d/resourceGroups/aks_terraform_rg][0m
[0m[1mazurerm_container_registry.acr: Refreshing state... [id=/subscriptions/9ae5c229-9413-4920-bd6d-4b8b0ea5d15d/resourceGroups/aks_terraform_rg/providers/Microsoft.ContainerRegistry/registries/tpgldevopsacr][0m

Terraform used the selected providers to generate the following execution
plan. Resource actions are indicated with the following symbols:
  [32m+[0m create[0m
[31m-[0m/[32m+[0m destroy and then create replacement[0m

Terraform will perform the following actions:

[1m  # azurerm_container_registry.acr[0m must be [1m[31mreplaced[0m
[0m[31m-[0m/[32m+[0m[0m resource "azurerm_container_registry" "acr" {
      [32m+[0m[0m admin_password                = (sensitive value)
      [32m+[0m[0m admin_username                = (known after apply)
      [33m~[0m[0m encryption                    = [
          [31m-[0m[0m {
              [31m-[0m[0m enabled            = false
              [31m-[0m[0m identity_client_id = ""
              [31m-[0m[0m key_vault_key_id   = ""
            },
        ] -> (known after apply)
      [33m~[0m[0m georeplication_locations      = [] -> (known after apply)
      [33m~[0m[0m georeplications               = [] -> (known after apply)
      [33m~[0m[0m id                            = "/subscriptions/9ae5c229-9413-4920-bd6d-4b8b0ea5d15d/resourceGroups/aks_terraform_rg/providers/Microsoft.ContainerRegistry/registries/tpgldevopsacr" -> (known after apply)
      [33m~[0m[0m location                      = "northeurope" [33m->[0m[0m "westeurope" [31m# forces replacement[0m[0m
      [33m~[0m[0m login_server                  = "tpgldevopsacr.azurecr.io" -> (known after apply)
        name                          = "tpgldevopsacr"
      [33m~[0m[0m network_rule_set              = [] -> (known after apply)
      [31m-[0m[0m quarantine_policy_enabled     = false [90m-> null[0m[0m
      [33m~[0m[0m retention_policy              = [
          [31m-[0m[0m {
              [31m-[0m[0m days    = 7
              [31m-[0m[0m enabled = false
            },
        ] -> (known after apply)
      [31m-[0m[0m tags                          = {} [90m-> null[0m[0m
      [33m~[0m[0m trust_policy                  = [
          [31m-[0m[0m {
              [31m-[0m[0m enabled = false
            },
        ] -> (known after apply)
        [90m# (5 unchanged attributes hidden)[0m[0m
    }

[1m  # azurerm_kubernetes_cluster.aks[0m will be created
[0m  [32m+[0m[0m resource "azurerm_kubernetes_cluster" "aks" {
      [32m+[0m[0m dns_prefix                          = "terraform-aks"
      [32m+[0m[0m fqdn                                = (known after apply)
      [32m+[0m[0m id                                  = (known after apply)
      [32m+[0m[0m kube_admin_config                   = (known after apply)
      [32m+[0m[0m kube_admin_config_raw               = (sensitive value)
      [32m+[0m[0m kube_config                         = (known after apply)
      [32m+[0m[0m kube_config_raw                     = (sensitive value)
      [32m+[0m[0m kubernetes_version                  = "1.28.0"
      [32m+[0m[0m location                            = "westeurope"
      [32m+[0m[0m name                                = "terraform-aks"
      [32m+[0m[0m node_resource_group                 = (known after apply)
      [32m+[0m[0m private_cluster_enabled             = (known after apply)
      [32m+[0m[0m private_cluster_public_fqdn_enabled = false
      [32m+[0m[0m private_dns_zone_id                 = (known after apply)
      [32m+[0m[0m private_fqdn                        = (known after apply)
      [32m+[0m[0m private_link_enabled                = (known after apply)
      [32m+[0m[0m resource_group_name                 = "aks_terraform_rg"
      [32m+[0m[0m sku_tier                            = "Free"

      [32m+[0m[0m default_node_pool {
          [32m+[0m[0m enable_auto_scaling  = false
          [32m+[0m[0m kubelet_disk_type    = (known after apply)
          [32m+[0m[0m max_pods             = (known after apply)
          [32m+[0m[0m name                 = "system"
          [32m+[0m[0m node_count           = 3
          [32m+[0m[0m node_labels          = (known after apply)
          [32m+[0m[0m orchestrator_version = (known after apply)
          [32m+[0m[0m os_disk_size_gb      = (known after apply)
          [32m+[0m[0m os_disk_type         = "Managed"
          [32m+[0m[0m os_sku               = (known after apply)
          [32m+[0m[0m type                 = "VirtualMachineScaleSets"
          [32m+[0m[0m ultra_ssd_enabled    = false
          [32m+[0m[0m vm_size              = "Standard_DS2_v2"
        }

      [32m+[0m[0m identity {
          [32m+[0m[0m principal_id = (known after apply)
          [32m+[0m[0m tenant_id    = (known after apply)
          [32m+[0m[0m type         = "SystemAssigned"
        }

      [32m+[0m[0m network_profile {
          [32m+[0m[0m dns_service_ip     = (known after apply)
          [32m+[0m[0m docker_bridge_cidr = (known after apply)
          [32m+[0m[0m load_balancer_sku  = "Standard"
          [32m+[0m[0m network_mode       = (known after apply)
          [32m+[0m[0m network_plugin     = "kubenet"
          [32m+[0m[0m network_policy     = (known after apply)
          [32m+[0m[0m outbound_type      = "loadBalancer"
          [32m+[0m[0m pod_cidr           = (known after apply)
          [32m+[0m[0m service_cidr       = (known after apply)
        }
    }

[1m  # azurerm_resource_group.rg[0m must be [1m[31mreplaced[0m
[0m[31m-[0m/[32m+[0m[0m resource "azurerm_resource_group" "rg" {
      [33m~[0m[0m id       = "/subscriptions/9ae5c229-9413-4920-bd6d-4b8b0ea5d15d/resourceGroups/aks_terraform_rg" -> (known after apply)
      [33m~[0m[0m location = "northeurope" [33m->[0m[0m "westeurope" [31m# forces replacement[0m[0m
        name     = "aks_terraform_rg"
      [31m-[0m[0m tags     = {} [90m-> null[0m[0m
    }

[1m  # azurerm_role_assignment.role_acrpull[0m will be created
[0m  [32m+[0m[0m resource "azurerm_role_assignment" "role_acrpull" {
      [32m+[0m[0m id                               = (known after apply)
      [32m+[0m[0m name                             = (known after apply)
      [32m+[0m[0m principal_id                     = (known after apply)
      [32m+[0m[0m principal_type                   = (known after apply)
      [32m+[0m[0m role_definition_id               = (known after apply)
      [32m+[0m[0m role_definition_name             = "AcrPull"
      [32m+[0m[0m scope                            = (known after apply)
      [32m+[0m[0m skip_service_principal_aad_check = true
    }

[1mPlan:[0m 4 to add, 0 to change, 2 to destroy.
[0m
Changes to Outputs:
  [33m~[0m[0m acr_id           = "/subscriptions/9ae5c229-9413-4920-bd6d-4b8b0ea5d15d/resourceGroups/aks_terraform_rg/providers/Microsoft.ContainerRegistry/registries/tpgldevopsacr" -> (known after apply)
  [33m~[0m[0m acr_login_server = "tpgldevopsacr.azurecr.io" -> (known after apply)
  [32m+[0m[0m aks_fqdn         = (known after apply)
  [32m+[0m[0m aks_id           = (known after apply)
  [32m+[0m[0m aks_node_rg      = (known after apply)
[90m
â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€[0m

Saved the plan to: tfplan

To perform exactly these actions, run the following command to apply:
    terraform apply "tfplan"
[0m[1mazurerm_resource_group.rg: Refreshing state... [id=/subscriptions/9ae5c229-9413-4920-bd6d-4b8b0ea5d15d/resourceGroups/aks_terraform_rg][0m
[0m[1mazurerm_container_registry.acr: Refreshing state... [id=/subscriptions/9ae5c229-9413-4920-bd6d-4b8b0ea5d15d/resourceGroups/aks_terraform_rg/providers/Microsoft.ContainerRegistry/registries/tpgldevopsacr][0m

Terraform used the selected providers to generate the following execution
plan. Resource actions are indicated with the following symbols:
  [32m+[0m create[0m
[31m-[0m/[32m+[0m destroy and then create replacement[0m

Terraform will perform the following actions:

[1m  # azurerm_container_registry.acr[0m is tainted, so must be [1m[31mreplaced[0m
[0m[31m-[0m/[32m+[0m[0m resource "azurerm_container_registry" "acr" {
      [32m+[0m[0m admin_password                = (sensitive value)
      [32m+[0m[0m admin_username                = (known after apply)
      [33m~[0m[0m encryption                    = [
          [31m-[0m[0m {
              [31m-[0m[0m enabled            = false
              [31m-[0m[0m identity_client_id = ""
              [31m-[0m[0m key_vault_key_id   = ""
            },
        ] -> (known after apply)
      [33m~[0m[0m georeplication_locations      = [] -> (known after apply)
      [33m~[0m[0m georeplications               = [] -> (known after apply)
      [33m~[0m[0m id                            = "/subscriptions/9ae5c229-9413-4920-bd6d-4b8b0ea5d15d/resourceGroups/aks_terraform_rg/providers/Microsoft.ContainerRegistry/registries/tpgldevopsacr" -> (known after apply)
      [33m~[0m[0m location                      = "westeurope" [33m->[0m[0m "northeurope"
      [33m~[0m[0m login_server                  = "tpgldevopsacr.azurecr.io" -> (known after apply)
        name                          = "tpgldevopsacr"
      [33m~[0m[0m network_rule_set              = [] -> (known after apply)
      [31m-[0m[0m quarantine_policy_enabled     = false [90m-> null[0m[0m
      [33m~[0m[0m retention_policy              = [
          [31m-[0m[0m {
              [31m-[0m[0m days    = 7
              [31m-[0m[0m enabled = false
            },
        ] -> (known after apply)
      [31m-[0m[0m tags                          = {} [90m-> null[0m[0m
      [33m~[0m[0m trust_policy                  = [
          [31m-[0m[0m {
              [31m-[0m[0m enabled = false
            },
        ] -> (known after apply)
        [90m# (5 unchanged attributes hidden)[0m[0m
    }

[1m  # azurerm_kubernetes_cluster.aks[0m will be created
[0m  [32m+[0m[0m resource "azurerm_kubernetes_cluster" "aks" {
      [32m+[0m[0m dns_prefix                          = "terraform-aks"
      [32m+[0m[0m fqdn                                = (known after apply)
      [32m+[0m[0m id                                  = (known after apply)
      [32m+[0m[0m kube_admin_config                   = (known after apply)
      [32m+[0m[0m kube_admin_config_raw               = (sensitive value)
      [32m+[0m[0m kube_config                         = (known after apply)
      [32m+[0m[0m kube_config_raw                     = (sensitive value)
      [32m+[0m[0m kubernetes_version                  = "1.28.0"
      [32m+[0m[0m location                            = "northeurope"
      [32m+[0m[0m name                                = "terraform-aks"
      [32m+[0m[0m node_resource_group                 = (known after apply)
      [32m+[0m[0m private_cluster_enabled             = (known after apply)
      [32m+[0m[0m private_cluster_public_fqdn_enabled = false
      [32m+[0m[0m private_dns_zone_id                 = (known after apply)
      [32m+[0m[0m private_fqdn                        = (known after apply)
      [32m+[0m[0m private_link_enabled                = (known after apply)
      [32m+[0m[0m resource_group_name                 = "aks_terraform_rg"
      [32m+[0m[0m sku_tier                            = "Free"

      [32m+[0m[0m default_node_pool {
          [32m+[0m[0m enable_auto_scaling  = false
          [32m+[0m[0m kubelet_disk_type    = (known after apply)
          [32m+[0m[0m max_pods             = (known after apply)
          [32m+[0m[0m name                 = "system"
          [32m+[0m[0m node_count           = 3
          [32m+[0m[0m node_labels          = (known after apply)
          [32m+[0m[0m orchestrator_version = (known after apply)
          [32m+[0m[0m os_disk_size_gb      = (known after apply)
          [32m+[0m[0m os_disk_type         = "Managed"
          [32m+[0m[0m os_sku               = (known after apply)
          [32m+[0m[0m type                 = "VirtualMachineScaleSets"
          [32m+[0m[0m ultra_ssd_enabled    = false
          [32m+[0m[0m vm_size              = "Standard_DS1_v2"
        }

      [32m+[0m[0m identity {
          [32m+[0m[0m principal_id = (known after apply)
          [32m+[0m[0m tenant_id    = (known after apply)
          [32m+[0m[0m type         = "SystemAssigned"
        }

      [32m+[0m[0m network_profile {
          [32m+[0m[0m dns_service_ip     = (known after apply)
          [32m+[0m[0m docker_bridge_cidr = (known after apply)
          [32m+[0m[0m load_balancer_sku  = "Standard"
          [32m+[0m[0m network_mode       = (known after apply)
          [32m+[0m[0m network_plugin     = "kubenet"
          [32m+[0m[0m network_policy     = (known after apply)
          [32m+[0m[0m outbound_type      = "loadBalancer"
          [32m+[0m[0m pod_cidr           = (known after apply)
          [32m+[0m[0m service_cidr       = (known after apply)
        }
    }

[1m  # azurerm_resource_group.rg[0m must be [1m[31mreplaced[0m
[0m[31m-[0m/[32m+[0m[0m resource "azurerm_resource_group" "rg" {
      [33m~[0m[0m id       = "/subscriptions/9ae5c229-9413-4920-bd6d-4b8b0ea5d15d/resourceGroups/aks_terraform_rg" -> (known after apply)
      [33m~[0m[0m location = "westeurope" [33m->[0m[0m "northeurope" [31m# forces replacement[0m[0m
        name     = "aks_terraform_rg"
      [31m-[0m[0m tags     = {} [90m-> null[0m[0m
    }

[1m  # azurerm_role_assignment.role_acrpull[0m will be created
[0m  [32m+[0m[0m resource "azurerm_role_assignment" "role_acrpull" {
      [32m+[0m[0m id                               = (known after apply)
      [32m+[0m[0m name                             = (known after apply)
      [32m+[0m[0m principal_id                     = (known after apply)
      [32m+[0m[0m principal_type                   = (known after apply)
      [32m+[0m[0m role_definition_id               = (known after apply)
      [32m+[0m[0m role_definition_name             = "AcrPull"
      [32m+[0m[0m scope                            = (known after apply)
      [32m+[0m[0m skip_service_principal_aad_check = true
    }

[1mPlan:[0m 4 to add, 0 to change, 2 to destroy.
[0m
Changes to Outputs:
  [33m~[0m[0m acr_id           = "/subscriptions/9ae5c229-9413-4920-bd6d-4b8b0ea5d15d/resourceGroups/aks_terraform_rg/providers/Microsoft.ContainerRegistry/registries/tpgldevopsacr" -> (known after apply)
  [33m~[0m[0m acr_login_server = "tpgldevopsacr.azurecr.io" -> (known after apply)
  [32m+[0m[0m aks_fqdn         = (known after apply)
  [32m+[0m[0m aks_id           = (known after apply)
  [32m+[0m[0m aks_node_rg      = (known after apply)
[90m
â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€[0m

Saved the plan to: tfplan

To perform exactly these actions, run the following command to apply:
    terraform apply "tfplan"

Interrupt received.
Please wait for Terraform to exit or data loss may occur.
Gracefully shutting down...

Stopping operation...

[0m[1m[31mPlanning failed.[0m[1m Terraform encountered an error while generating this plan.[0m

[0m[0m[1mazurerm_resource_group.rg: Refreshing state... [id=/subscriptions/9ae5c229-9413-4920-bd6d-4b8b0ea5d15d/resourceGroups/aks_terraform_rg][0m

Terraform used the selected providers to generate the following execution
plan. Resource actions are indicated with the following symbols:
  [32m+[0m create[0m

Terraform will perform the following actions:

[1m  # azurerm_container_registry.acr[0m will be created
[0m  [32m+[0m[0m resource "azurerm_container_registry" "acr" {
      [32m+[0m[0m admin_enabled                 = false
      [32m+[0m[0m admin_password                = (sensitive value)
      [32m+[0m[0m admin_username                = (known after apply)
      [32m+[0m[0m encryption                    = (known after apply)
      [32m+[0m[0m georeplication_locations      = (known after apply)
      [32m+[0m[0m georeplications               = (known after apply)
      [32m+[0m[0m id                            = (known after apply)
      [32m+[0m[0m location                      = "northeurope"
      [32m+[0m[0m login_server                  = (known after apply)
      [32m+[0m[0m name                          = "tpgldevopsacr"
      [32m+[0m[0m network_rule_set              = (known after apply)
      [32m+[0m[0m public_network_access_enabled = true
      [32m+[0m[0m resource_group_name           = "aks_terraform_rg"
      [32m+[0m[0m retention_policy              = (known after apply)
      [32m+[0m[0m sku                           = "Standard"
      [32m+[0m[0m trust_policy                  = (known after apply)
      [32m+[0m[0m zone_redundancy_enabled       = false
    }

[1m  # azurerm_kubernetes_cluster.aks[0m will be created
[0m  [32m+[0m[0m resource "azurerm_kubernetes_cluster" "aks" {
      [32m+[0m[0m dns_prefix                          = "terraform-aks"
      [32m+[0m[0m fqdn                                = (known after apply)
      [32m+[0m[0m id                                  = (known after apply)
      [32m+[0m[0m kube_admin_config                   = (known after apply)
      [32m+[0m[0m kube_admin_config_raw               = (sensitive value)
      [32m+[0m[0m kube_config                         = (known after apply)
      [32m+[0m[0m kube_config_raw                     = (sensitive value)
      [32m+[0m[0m kubernetes_version                  = "1.28.0"
      [32m+[0m[0m location                            = "northeurope"
      [32m+[0m[0m name                                = "terraform-aks"
      [32m+[0m[0m node_resource_group                 = (known after apply)
      [32m+[0m[0m private_cluster_enabled             = (known after apply)
      [32m+[0m[0m private_cluster_public_fqdn_enabled = false
      [32m+[0m[0m private_dns_zone_id                 = (known after apply)
      [32m+[0m[0m private_fqdn                        = (known after apply)
      [32m+[0m[0m private_link_enabled                = (known after apply)
      [32m+[0m[0m resource_group_name                 = "aks_terraform_rg"
      [32m+[0m[0m sku_tier                            = "Free"

      [32m+[0m[0m default_node_pool {
          [32m+[0m[0m availability_zones   = [
              [32m+[0m[0m "1",
              [32m+[0m[0m "2",
              [32m+[0m[0m "3",
            ]
          [32m+[0m[0m enable_auto_scaling  = false
          [32m+[0m[0m kubelet_disk_type    = (known after apply)
          [32m+[0m[0m max_pods             = (known after apply)
          [32m+[0m[0m name                 = "system"
          [32m+[0m[0m node_count           = 3
          [32m+[0m[0m node_labels          = (known after apply)
          [32m+[0m[0m orchestrator_version = (known after apply)
          [32m+[0m[0m os_disk_size_gb      = (known after apply)
          [32m+[0m[0m os_disk_type         = "Managed"
          [32m+[0m[0m os_sku               = (known after apply)
          [32m+[0m[0m type                 = "VirtualMachineScaleSets"
          [32m+[0m[0m ultra_ssd_enabled    = false
          [32m+[0m[0m vm_size              = "Standard_DS1_v2"
        }

      [32m+[0m[0m identity {
          [32m+[0m[0m principal_id = (known after apply)
          [32m+[0m[0m tenant_id    = (known after apply)
          [32m+[0m[0m type         = "SystemAssigned"
        }

      [32m+[0m[0m network_profile {
          [32m+[0m[0m dns_service_ip     = (known after apply)
          [32m+[0m[0m docker_bridge_cidr = (known after apply)
          [32m+[0m[0m load_balancer_sku  = "Standard"
          [32m+[0m[0m network_mode       = (known after apply)
          [32m+[0m[0m network_plugin     = "kubenet"
          [32m+[0m[0m network_policy     = (known after apply)
          [32m+[0m[0m outbound_type      = "loadBalancer"
          [32m+[0m[0m pod_cidr           = (known after apply)
          [32m+[0m[0m service_cidr       = (known after apply)
        }
    }

[1m  # azurerm_role_assignment.role_acrpull[0m will be created
[0m  [32m+[0m[0m resource "azurerm_role_assignment" "role_acrpull" {
      [32m+[0m[0m id                               = (known after apply)
      [32m+[0m[0m name                             = (known after apply)
      [32m+[0m[0m principal_id                     = (known after apply)
      [32m+[0m[0m principal_type                   = (known after apply)
      [32m+[0m[0m role_definition_id               = (known after apply)
      [32m+[0m[0m role_definition_name             = "AcrPull"
      [32m+[0m[0m scope                            = (known after apply)
      [32m+[0m[0m skip_service_principal_aad_check = true
    }

[1mPlan:[0m 3 to add, 0 to change, 0 to destroy.
[0m
Changes to Outputs:
  [33m~[0m[0m acr_id           = "/subscriptions/9ae5c229-9413-4920-bd6d-4b8b0ea5d15d/resourceGroups/aks_terraform_rg/providers/Microsoft.ContainerRegistry/registries/tpgldevopsacr" -> (known after apply)
  [33m~[0m[0m acr_login_server = "tpgldevopsacr.azurecr.io" -> (known after apply)
  [32m+[0m[0m aks_fqdn         = (known after apply)
  [32m+[0m[0m aks_id           = (known after apply)
  [32m+[0m[0m aks_node_rg      = (known after apply)
[90m
â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€[0m

Saved the plan to: tfplan

To perform exactly these actions, run the following command to apply:
    terraform apply "tfplan"
[0m[1mazurerm_resource_group.rg: Refreshing state... [id=/subscriptions/9ae5c229-9413-4920-bd6d-4b8b0ea5d15d/resourceGroups/aks_terraform_rg][0m

Terraform used the selected providers to generate the following execution
plan. Resource actions are indicated with the following symbols:
  [32m+[0m create[0m

Terraform will perform the following actions:

[1m  # azurerm_container_registry.acr[0m will be created
[0m  [32m+[0m[0m resource "azurerm_container_registry" "acr" {
      [32m+[0m[0m admin_enabled                 = false
      [32m+[0m[0m admin_password                = (sensitive value)
      [32m+[0m[0m admin_username                = (known after apply)
      [32m+[0m[0m encryption                    = (known after apply)
      [32m+[0m[0m georeplication_locations      = (known after apply)
      [32m+[0m[0m georeplications               = (known after apply)
      [32m+[0m[0m id                            = (known after apply)
      [32m+[0m[0m location                      = "northeurope"
      [32m+[0m[0m login_server                  = (known after apply)
      [32m+[0m[0m name                          = "tpgldevopsacr"
      [32m+[0m[0m network_rule_set              = (known after apply)
      [32m+[0m[0m public_network_access_enabled = true
      [32m+[0m[0m resource_group_name           = "aks_terraform_rg"
      [32m+[0m[0m retention_policy              = (known after apply)
      [32m+[0m[0m sku                           = "Standard"
      [32m+[0m[0m trust_policy                  = (known after apply)
      [32m+[0m[0m zone_redundancy_enabled       = false
    }

[1m  # azurerm_kubernetes_cluster.aks[0m will be created
[0m  [32m+[0m[0m resource "azurerm_kubernetes_cluster" "aks" {
      [32m+[0m[0m dns_prefix                          = "terraform-aks"
      [32m+[0m[0m fqdn                                = (known after apply)
      [32m+[0m[0m id                                  = (known after apply)
      [32m+[0m[0m kube_admin_config                   = (known after apply)
      [32m+[0m[0m kube_admin_config_raw               = (sensitive value)
      [32m+[0m[0m kube_config                         = (known after apply)
      [32m+[0m[0m kube_config_raw                     = (sensitive value)
      [32m+[0m[0m kubernetes_version                  = "1.28.0"
      [32m+[0m[0m location                            = "northeurope"
      [32m+[0m[0m name                                = "terraform-aks"
      [32m+[0m[0m node_resource_group                 = (known after apply)
      [32m+[0m[0m private_cluster_enabled             = (known after apply)
      [32m+[0m[0m private_cluster_public_fqdn_enabled = false
      [32m+[0m[0m private_dns_zone_id                 = (known after apply)
      [32m+[0m[0m private_fqdn                        = (known after apply)
      [32m+[0m[0m private_link_enabled                = (known after apply)
      [32m+[0m[0m resource_group_name                 = "aks_terraform_rg"
      [32m+[0m[0m sku_tier                            = "Free"

      [32m+[0m[0m default_node_pool {
          [32m+[0m[0m enable_auto_scaling  = false
          [32m+[0m[0m kubelet_disk_type    = (known after apply)
          [32m+[0m[0m max_pods             = (known after apply)
          [32m+[0m[0m name                 = "system"
          [32m+[0m[0m node_count           = 3
          [32m+[0m[0m node_labels          = (known after apply)
          [32m+[0m[0m orchestrator_version = (known after apply)
          [32m+[0m[0m os_disk_size_gb      = (known after apply)
          [32m+[0m[0m os_disk_type         = "Managed"
          [32m+[0m[0m os_sku               = (known after apply)
          [32m+[0m[0m type                 = "VirtualMachineScaleSets"
          [32m+[0m[0m ultra_ssd_enabled    = false
          [32m+[0m[0m vm_size              = "Standard_DS1_v2"
        }

      [32m+[0m[0m identity {
          [32m+[0m[0m principal_id = (known after apply)
          [32m+[0m[0m tenant_id    = (known after apply)
          [32m+[0m[0m type         = "SystemAssigned"
        }

      [32m+[0m[0m network_profile {
          [32m+[0m[0m dns_service_ip     = (known after apply)
          [32m+[0m[0m docker_bridge_cidr = (known after apply)
          [32m+[0m[0m load_balancer_sku  = "Standard"
          [32m+[0m[0m network_mode       = (known after apply)
          [32m+[0m[0m network_plugin     = "kubenet"
          [32m+[0m[0m network_policy     = (known after apply)
          [32m+[0m[0m outbound_type      = "loadBalancer"
          [32m+[0m[0m pod_cidr           = (known after apply)
          [32m+[0m[0m service_cidr       = (known after apply)
        }
    }

[1m  # azurerm_role_assignment.role_acrpull[0m will be created
[0m  [32m+[0m[0m resource "azurerm_role_assignment" "role_acrpull" {
      [32m+[0m[0m id                               = (known after apply)
      [32m+[0m[0m name                             = (known after apply)
      [32m+[0m[0m principal_id                     = (known after apply)
      [32m+[0m[0m principal_type                   = (known after apply)
      [32m+[0m[0m role_definition_id               = (known after apply)
      [32m+[0m[0m role_definition_name             = "AcrPull"
      [32m+[0m[0m scope                            = (known after apply)
      [32m+[0m[0m skip_service_principal_aad_check = true
    }

[1mPlan:[0m 3 to add, 0 to change, 0 to destroy.
[0m
Changes to Outputs:
  [33m~[0m[0m acr_id           = "/subscriptions/9ae5c229-9413-4920-bd6d-4b8b0ea5d15d/resourceGroups/aks_terraform_rg/providers/Microsoft.ContainerRegistry/registries/tpgldevopsacr" -> (known after apply)
  [33m~[0m[0m acr_login_server = "tpgldevopsacr.azurecr.io" -> (known after apply)
  [32m+[0m[0m aks_fqdn         = (known after apply)
  [32m+[0m[0m aks_id           = (known after apply)
  [32m+[0m[0m aks_node_rg      = (known after apply)
[90m
â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€[0m

Saved the plan to: tfplan

To perform exactly these actions, run the following command to apply:
    terraform apply "tfplan"

Terraform used the selected providers to generate the following execution
plan. Resource actions are indicated with the following symbols:
  [32m+[0m create[0m

Terraform will perform the following actions:

[1m  # azurerm_container_registry.acr[0m will be created
[0m  [32m+[0m[0m resource "azurerm_container_registry" "acr" {
      [32m+[0m[0m admin_enabled                 = false
      [32m+[0m[0m admin_password                = (sensitive value)
      [32m+[0m[0m admin_username                = (known after apply)
      [32m+[0m[0m encryption                    = (known after apply)
      [32m+[0m[0m georeplication_locations      = (known after apply)
      [32m+[0m[0m georeplications               = (known after apply)
      [32m+[0m[0m id                            = (known after apply)
      [32m+[0m[0m location                      = "northeurope"
      [32m+[0m[0m login_server                  = (known after apply)
      [32m+[0m[0m name                          = "tpgldevopsacr"
      [32m+[0m[0m network_rule_set              = (known after apply)
      [32m+[0m[0m public_network_access_enabled = true
      [32m+[0m[0m resource_group_name           = "aks_terraform_rg"
      [32m+[0m[0m retention_policy              = (known after apply)
      [32m+[0m[0m sku                           = "Standard"
      [32m+[0m[0m trust_policy                  = (known after apply)
      [32m+[0m[0m zone_redundancy_enabled       = false
    }

[1m  # azurerm_kubernetes_cluster.aks[0m will be created
[0m  [32m+[0m[0m resource "azurerm_kubernetes_cluster" "aks" {
      [32m+[0m[0m dns_prefix                          = "terraform-aks"
      [32m+[0m[0m fqdn                                = (known after apply)
      [32m+[0m[0m id                                  = (known after apply)
      [32m+[0m[0m kube_admin_config                   = (known after apply)
      [32m+[0m[0m kube_admin_config_raw               = (sensitive value)
      [32m+[0m[0m kube_config                         = (known after apply)
      [32m+[0m[0m kube_config_raw                     = (sensitive value)
      [32m+[0m[0m kubernetes_version                  = "1.28.0"
      [32m+[0m[0m location                            = "northeurope"
      [32m+[0m[0m name                                = "terraform-aks"
      [32m+[0m[0m node_resource_group                 = (known after apply)
      [32m+[0m[0m private_cluster_enabled             = (known after apply)
      [32m+[0m[0m private_cluster_public_fqdn_enabled = false
      [32m+[0m[0m private_dns_zone_id                 = (known after apply)
      [32m+[0m[0m private_fqdn                        = (known after apply)
      [32m+[0m[0m private_link_enabled                = (known after apply)
      [32m+[0m[0m resource_group_name                 = "aks_terraform_rg"
      [32m+[0m[0m sku_tier                            = "Free"

      [32m+[0m[0m default_node_pool {
          [32m+[0m[0m enable_auto_scaling  = false
          [32m+[0m[0m kubelet_disk_type    = (known after apply)
          [32m+[0m[0m max_pods             = (known after apply)
          [32m+[0m[0m name                 = "system"
          [32m+[0m[0m node_count           = 3
          [32m+[0m[0m node_labels          = (known after apply)
          [32m+[0m[0m orchestrator_version = (known after apply)
          [32m+[0m[0m os_disk_size_gb      = (known after apply)
          [32m+[0m[0m os_disk_type         = "Managed"
          [32m+[0m[0m os_sku               = (known after apply)
          [32m+[0m[0m type                 = "VirtualMachineScaleSets"
          [32m+[0m[0m ultra_ssd_enabled    = false
          [32m+[0m[0m vm_size              = "Standard_DS1_v2"
        }

      [32m+[0m[0m identity {
          [32m+[0m[0m principal_id = (known after apply)
          [32m+[0m[0m tenant_id    = (known after apply)
          [32m+[0m[0m type         = "SystemAssigned"
        }

      [32m+[0m[0m network_profile {
          [32m+[0m[0m dns_service_ip     = (known after apply)
          [32m+[0m[0m docker_bridge_cidr = (known after apply)
          [32m+[0m[0m load_balancer_sku  = "Standard"
          [32m+[0m[0m network_mode       = (known after apply)
          [32m+[0m[0m network_plugin     = "kubenet"
          [32m+[0m[0m network_policy     = (known after apply)
          [32m+[0m[0m outbound_type      = "loadBalancer"
          [32m+[0m[0m pod_cidr           = (known after apply)
          [32m+[0m[0m service_cidr       = (known after apply)
        }
    }

[1m  # azurerm_resource_group.rg[0m will be created
[0m  [32m+[0m[0m resource "azurerm_resource_group" "rg" {
      [32m+[0m[0m id       = (known after apply)
      [32m+[0m[0m location = "northeurope"
      [32m+[0m[0m name     = "aks_terraform_rg"
    }

[1m  # azurerm_role_assignment.role_acrpull[0m will be created
[0m  [32m+[0m[0m resource "azurerm_role_assignment" "role_acrpull" {
      [32m+[0m[0m id                               = (known after apply)
      [32m+[0m[0m name                             = (known after apply)
      [32m+[0m[0m principal_id                     = (known after apply)
      [32m+[0m[0m principal_type                   = (known after apply)
      [32m+[0m[0m role_definition_id               = (known after apply)
      [32m+[0m[0m role_definition_name             = "AcrPull"
      [32m+[0m[0m scope                            = (known after apply)
      [32m+[0m[0m skip_service_principal_aad_check = true
    }

[1mPlan:[0m 4 to add, 0 to change, 0 to destroy.
[0m
Changes to Outputs:
  [32m+[0m[0m acr_id           = (known after apply)
  [32m+[0m[0m acr_login_server = (known after apply)
  [32m+[0m[0m aks_fqdn         = (known after apply)
  [32m+[0m[0m aks_id           = (known after apply)
  [32m+[0m[0m aks_node_rg      = (known after apply)
[90m
â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€[0m

Saved the plan to: tfplan

To perform exactly these actions, run the following command to apply:
    terraform apply "tfplan"

Terraform used the selected providers to generate the following execution
plan. Resource actions are indicated with the following symbols:
  [32m+[0m create[0m

Terraform will perform the following actions:

[1m  # azurerm_container_registry.acr[0m will be created
[0m  [32m+[0m[0m resource "azurerm_container_registry" "acr" {
      [32m+[0m[0m admin_enabled                 = false
      [32m+[0m[0m admin_password                = (sensitive value)
      [32m+[0m[0m admin_username                = (known after apply)
      [32m+[0m[0m encryption                    = (known after apply)
      [32m+[0m[0m georeplication_locations      = (known after apply)
      [32m+[0m[0m georeplications               = (known after apply)
      [32m+[0m[0m id                            = (known after apply)
      [32m+[0m[0m location                      = "northeurope"
      [32m+[0m[0m login_server                  = (known after apply)
      [32m+[0m[0m name                          = "tpgldevopsacr"
      [32m+[0m[0m network_rule_set              = (known after apply)
      [32m+[0m[0m public_network_access_enabled = true
      [32m+[0m[0m resource_group_name           = "aks_terraform_rg"
      [32m+[0m[0m retention_policy              = (known after apply)
      [32m+[0m[0m sku                           = "Standard"
      [32m+[0m[0m trust_policy                  = (known after apply)
      [32m+[0m[0m zone_redundancy_enabled       = false
    }

[1m  # azurerm_kubernetes_cluster.aks[0m will be created
[0m  [32m+[0m[0m resource "azurerm_kubernetes_cluster" "aks" {
      [32m+[0m[0m dns_prefix                          = "terraform-aks"
      [32m+[0m[0m fqdn                                = (known after apply)
      [32m+[0m[0m id                                  = (known after apply)
      [32m+[0m[0m kube_admin_config                   = (known after apply)
      [32m+[0m[0m kube_admin_config_raw               = (sensitive value)
      [32m+[0m[0m kube_config                         = (known after apply)
      [32m+[0m[0m kube_config_raw                     = (sensitive value)
      [32m+[0m[0m kubernetes_version                  = "1.28.0"
      [32m+[0m[0m location                            = "northeurope"
      [32m+[0m[0m name                                = "terraform-aks"
      [32m+[0m[0m node_resource_group                 = (known after apply)
      [32m+[0m[0m private_cluster_enabled             = (known after apply)
      [32m+[0m[0m private_cluster_public_fqdn_enabled = false
      [32m+[0m[0m private_dns_zone_id                 = (known after apply)
      [32m+[0m[0m private_fqdn                        = (known after apply)
      [32m+[0m[0m private_link_enabled                = (known after apply)
      [32m+[0m[0m resource_group_name                 = "aks_terraform_rg"
      [32m+[0m[0m sku_tier                            = "Free"

      [32m+[0m[0m default_node_pool {
          [32m+[0m[0m enable_auto_scaling  = false
          [32m+[0m[0m kubelet_disk_type    = (known after apply)
          [32m+[0m[0m max_pods             = (known after apply)
          [32m+[0m[0m name                 = "system"
          [32m+[0m[0m node_count           = 3
          [32m+[0m[0m node_labels          = (known after apply)
          [32m+[0m[0m orchestrator_version = (known after apply)
          [32m+[0m[0m os_disk_size_gb      = (known after apply)
          [32m+[0m[0m os_disk_type         = "Managed"
          [32m+[0m[0m os_sku               = (known after apply)
          [32m+[0m[0m type                 = "VirtualMachineScaleSets"
          [32m+[0m[0m ultra_ssd_enabled    = false
          [32m+[0m[0m vm_size              = "Standard_D2s_v3"
        }

      [32m+[0m[0m identity {
          [32m+[0m[0m principal_id = (known after apply)
          [32m+[0m[0m tenant_id    = (known after apply)
          [32m+[0m[0m type         = "SystemAssigned"
        }

      [32m+[0m[0m network_profile {
          [32m+[0m[0m dns_service_ip     = (known after apply)
          [32m+[0m[0m docker_bridge_cidr = (known after apply)
          [32m+[0m[0m load_balancer_sku  = "Standard"
          [32m+[0m[0m network_mode       = (known after apply)
          [32m+[0m[0m network_plugin     = "kubenet"
          [32m+[0m[0m network_policy     = (known after apply)
          [32m+[0m[0m outbound_type      = "loadBalancer"
          [32m+[0m[0m pod_cidr           = (known after apply)
          [32m+[0m[0m service_cidr       = (known after apply)
        }
    }

[1m  # azurerm_resource_group.rg[0m will be created
[0m  [32m+[0m[0m resource "azurerm_resource_group" "rg" {
      [32m+[0m[0m id       = (known after apply)
      [32m+[0m[0m location = "northeurope"
      [32m+[0m[0m name     = "aks_terraform_rg"
    }

[1m  # azurerm_role_assignment.role_acrpull[0m will be created
[0m  [32m+[0m[0m resource "azurerm_role_assignment" "role_acrpull" {
      [32m+[0m[0m id                               = (known after apply)
      [32m+[0m[0m name                             = (known after apply)
      [32m+[0m[0m principal_id                     = (known after apply)
      [32m+[0m[0m principal_type                   = (known after apply)
      [32m+[0m[0m role_definition_id               = (known after apply)
      [32m+[0m[0m role_definition_name             = "AcrPull"
      [32m+[0m[0m scope                            = (known after apply)
      [32m+[0m[0m skip_service_principal_aad_check = true
    }

[1mPlan:[0m 4 to add, 0 to change, 0 to destroy.
[0m
Changes to Outputs:
  [32m+[0m[0m acr_id           = (known after apply)
  [32m+[0m[0m acr_login_server = (known after apply)
  [32m+[0m[0m aks_fqdn         = (known after apply)
  [32m+[0m[0m aks_id           = (known after apply)
  [32m+[0m[0m aks_node_rg      = (known after apply)
[90m
â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€[0m

Saved the plan to: tfplan

To perform exactly these actions, run the following command to apply:
    terraform apply "tfplan"
[0m[1mazurerm_resource_group.rg: Refreshing state... [id=/subscriptions/9ae5c229-9413-4920-bd6d-4b8b0ea5d15d/resourceGroups/aks_terraform_rg][0m

Terraform used the selected providers to generate the following execution
plan. Resource actions are indicated with the following symbols:
  [32m+[0m create[0m

Terraform will perform the following actions:

[1m  # azurerm_container_registry.acr[0m will be created
[0m  [32m+[0m[0m resource "azurerm_container_registry" "acr" {
      [32m+[0m[0m admin_enabled                 = false
      [32m+[0m[0m admin_password                = (sensitive value)
      [32m+[0m[0m admin_username                = (known after apply)
      [32m+[0m[0m encryption                    = (known after apply)
      [32m+[0m[0m georeplication_locations      = (known after apply)
      [32m+[0m[0m georeplications               = (known after apply)
      [32m+[0m[0m id                            = (known after apply)
      [32m+[0m[0m location                      = "northeurope"
      [32m+[0m[0m login_server                  = (known after apply)
      [32m+[0m[0m name                          = "tpgldevopsacr"
      [32m+[0m[0m network_rule_set              = (known after apply)
      [32m+[0m[0m public_network_access_enabled = true
      [32m+[0m[0m resource_group_name           = "aks_terraform_rg"
      [32m+[0m[0m retention_policy              = (known after apply)
      [32m+[0m[0m sku                           = "Standard"
      [32m+[0m[0m trust_policy                  = (known after apply)
      [32m+[0m[0m zone_redundancy_enabled       = false
    }

[1m  # azurerm_kubernetes_cluster.aks[0m will be created
[0m  [32m+[0m[0m resource "azurerm_kubernetes_cluster" "aks" {
      [32m+[0m[0m dns_prefix                          = "terraform-aks"
      [32m+[0m[0m fqdn                                = (known after apply)
      [32m+[0m[0m id                                  = (known after apply)
      [32m+[0m[0m kube_admin_config                   = (known after apply)
      [32m+[0m[0m kube_admin_config_raw               = (sensitive value)
      [32m+[0m[0m kube_config                         = (known after apply)
      [32m+[0m[0m kube_config_raw                     = (sensitive value)
      [32m+[0m[0m kubernetes_version                  = "1.28.0"
      [32m+[0m[0m location                            = "northeurope"
      [32m+[0m[0m name                                = "terraform-aks"
      [32m+[0m[0m node_resource_group                 = (known after apply)
      [32m+[0m[0m private_cluster_enabled             = (known after apply)
      [32m+[0m[0m private_cluster_public_fqdn_enabled = false
      [32m+[0m[0m private_dns_zone_id                 = (known after apply)
      [32m+[0m[0m private_fqdn                        = (known after apply)
      [32m+[0m[0m private_link_enabled                = (known after apply)
      [32m+[0m[0m resource_group_name                 = "aks_terraform_rg"
      [32m+[0m[0m sku_tier                            = "Free"

      [32m+[0m[0m default_node_pool {
          [32m+[0m[0m enable_auto_scaling  = false
          [32m+[0m[0m kubelet_disk_type    = (known after apply)
          [32m+[0m[0m max_pods             = (known after apply)
          [32m+[0m[0m name                 = "system"
          [32m+[0m[0m node_count           = 2
          [32m+[0m[0m node_labels          = (known after apply)
          [32m+[0m[0m orchestrator_version = (known after apply)
          [32m+[0m[0m os_disk_size_gb      = (known after apply)
          [32m+[0m[0m os_disk_type         = "Managed"
          [32m+[0m[0m os_sku               = (known after apply)
          [32m+[0m[0m type                 = "VirtualMachineScaleSets"
          [32m+[0m[0m ultra_ssd_enabled    = false
          [32m+[0m[0m vm_size              = "Standard_D4s_v3"
        }

      [32m+[0m[0m identity {
          [32m+[0m[0m principal_id = (known after apply)
          [32m+[0m[0m tenant_id    = (known after apply)
          [32m+[0m[0m type         = "SystemAssigned"
        }

      [32m+[0m[0m network_profile {
          [32m+[0m[0m dns_service_ip     = (known after apply)
          [32m+[0m[0m docker_bridge_cidr = (known after apply)
          [32m+[0m[0m load_balancer_sku  = "Standard"
          [32m+[0m[0m network_mode       = (known after apply)
          [32m+[0m[0m network_plugin     = "kubenet"
          [32m+[0m[0m network_policy     = (known after apply)
          [32m+[0m[0m outbound_type      = "loadBalancer"
          [32m+[0m[0m pod_cidr           = (known after apply)
          [32m+[0m[0m service_cidr       = (known after apply)
        }
    }

[1m  # azurerm_role_assignment.role_acrpull[0m will be created
[0m  [32m+[0m[0m resource "azurerm_role_assignment" "role_acrpull" {
      [32m+[0m[0m id                               = (known after apply)
      [32m+[0m[0m name                             = (known after apply)
      [32m+[0m[0m principal_id                     = (known after apply)
      [32m+[0m[0m principal_type                   = (known after apply)
      [32m+[0m[0m role_definition_id               = (known after apply)
      [32m+[0m[0m role_definition_name             = "AcrPull"
      [32m+[0m[0m scope                            = (known after apply)
      [32m+[0m[0m skip_service_principal_aad_check = true
    }

[1mPlan:[0m 3 to add, 0 to change, 0 to destroy.
[0m
Changes to Outputs:
  [32m+[0m[0m acr_id           = (known after apply)
  [32m+[0m[0m acr_login_server = (known after apply)
  [32m+[0m[0m aks_fqdn         = (known after apply)
  [32m+[0m[0m aks_id           = (known after apply)
  [32m+[0m[0m aks_node_rg      = (known after apply)
[90m
â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€[0m

Saved the plan to: tfplan

To perform exactly these actions, run the following command to apply:
    terraform apply "tfplan"
[0m[1mazurerm_resource_group.rg: Refreshing state... [id=/subscriptions/9ae5c229-9413-4920-bd6d-4b8b0ea5d15d/resourceGroups/aks_terraform_rg][0m

Terraform used the selected providers to generate the following execution
plan. Resource actions are indicated with the following symbols:
  [32m+[0m create[0m

Terraform will perform the following actions:

[1m  # azurerm_container_registry.acr[0m will be created
[0m  [32m+[0m[0m resource "azurerm_container_registry" "acr" {
      [32m+[0m[0m admin_enabled                 = false
      [32m+[0m[0m admin_password                = (sensitive value)
      [32m+[0m[0m admin_username                = (known after apply)
      [32m+[0m[0m encryption                    = (known after apply)
      [32m+[0m[0m georeplication_locations      = (known after apply)
      [32m+[0m[0m georeplications               = (known after apply)
      [32m+[0m[0m id                            = (known after apply)
      [32m+[0m[0m location                      = "northeurope"
      [32m+[0m[0m login_server                  = (known after apply)
      [32m+[0m[0m name                          = "tpgldevopsacr"
      [32m+[0m[0m network_rule_set              = (known after apply)
      [32m+[0m[0m public_network_access_enabled = true
      [32m+[0m[0m resource_group_name           = "aks_terraform_rg"
      [32m+[0m[0m retention_policy              = (known after apply)
      [32m+[0m[0m sku                           = "Standard"
      [32m+[0m[0m trust_policy                  = (known after apply)
      [32m+[0m[0m zone_redundancy_enabled       = false
    }

[1m  # azurerm_kubernetes_cluster.aks[0m will be created
[0m  [32m+[0m[0m resource "azurerm_kubernetes_cluster" "aks" {
      [32m+[0m[0m dns_prefix                          = "terraform-aks"
      [32m+[0m[0m fqdn                                = (known after apply)
      [32m+[0m[0m id                                  = (known after apply)
      [32m+[0m[0m kube_admin_config                   = (known after apply)
      [32m+[0m[0m kube_admin_config_raw               = (sensitive value)
      [32m+[0m[0m kube_config                         = (known after apply)
      [32m+[0m[0m kube_config_raw                     = (sensitive value)
      [32m+[0m[0m kubernetes_version                  = "1.28.0"
      [32m+[0m[0m location                            = "northeurope"
      [32m+[0m[0m name                                = "terraform-aks"
      [32m+[0m[0m node_resource_group                 = (known after apply)
      [32m+[0m[0m private_cluster_enabled             = (known after apply)
      [32m+[0m[0m private_cluster_public_fqdn_enabled = false
      [32m+[0m[0m private_dns_zone_id                 = (known after apply)
      [32m+[0m[0m private_fqdn                        = (known after apply)
      [32m+[0m[0m private_link_enabled                = (known after apply)
      [32m+[0m[0m resource_group_name                 = "aks_terraform_rg"
      [32m+[0m[0m sku_tier                            = "Free"

      [32m+[0m[0m default_node_pool {
          [32m+[0m[0m enable_auto_scaling  = false
          [32m+[0m[0m kubelet_disk_type    = (known after apply)
          [32m+[0m[0m max_pods             = (known after apply)
          [32m+[0m[0m name                 = "system"
          [32m+[0m[0m node_count           = 2
          [32m+[0m[0m node_labels          = (known after apply)
          [32m+[0m[0m orchestrator_version = (known after apply)
          [32m+[0m[0m os_disk_size_gb      = (known after apply)
          [32m+[0m[0m os_disk_type         = "Managed"
          [32m+[0m[0m os_sku               = (known after apply)
          [32m+[0m[0m type                 = "VirtualMachineScaleSets"
          [32m+[0m[0m ultra_ssd_enabled    = false
          [32m+[0m[0m vm_size              = "Standard_D2s_v3"
        }

      [32m+[0m[0m identity {
          [32m+[0m[0m principal_id = (known after apply)
          [32m+[0m[0m tenant_id    = (known after apply)
          [32m+[0m[0m type         = "SystemAssigned"
        }

      [32m+[0m[0m network_profile {
          [32m+[0m[0m dns_service_ip     = (known after apply)
          [32m+[0m[0m docker_bridge_cidr = (known after apply)
          [32m+[0m[0m load_balancer_sku  = "Standard"
          [32m+[0m[0m network_mode       = (known after apply)
          [32m+[0m[0m network_plugin     = "kubenet"
          [32m+[0m[0m network_policy     = (known after apply)
          [32m+[0m[0m outbound_type      = "loadBalancer"
          [32m+[0m[0m pod_cidr           = (known after apply)
          [32m+[0m[0m service_cidr       = (known after apply)
        }
    }

[1m  # azurerm_role_assignment.role_acrpull[0m will be created
[0m  [32m+[0m[0m resource "azurerm_role_assignment" "role_acrpull" {
      [32m+[0m[0m id                               = (known after apply)
      [32m+[0m[0m name                             = (known after apply)
      [32m+[0m[0m principal_id                     = (known after apply)
      [32m+[0m[0m principal_type                   = (known after apply)
      [32m+[0m[0m role_definition_id               = (known after apply)
      [32m+[0m[0m role_definition_name             = "AcrPull"
      [32m+[0m[0m scope                            = (known after apply)
      [32m+[0m[0m skip_service_principal_aad_check = true
    }

[1mPlan:[0m 3 to add, 0 to change, 0 to destroy.
[0m
Changes to Outputs:
  [32m+[0m[0m acr_id           = (known after apply)
  [32m+[0m[0m acr_login_server = (known after apply)
  [32m+[0m[0m aks_fqdn         = (known after apply)
  [32m+[0m[0m aks_id           = (known after apply)
  [32m+[0m[0m aks_node_rg      = (known after apply)
[90m
â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€[0m

Saved the plan to: tfplan

To perform exactly these actions, run the following command to apply:
    terraform apply "tfplan"
[0m[1mazurerm_resource_group.rg: Refreshing state... [id=/subscriptions/9ae5c229-9413-4920-bd6d-4b8b0ea5d15d/resourceGroups/aks_terraform_rg][0m

Terraform used the selected providers to generate the following execution
plan. Resource actions are indicated with the following symbols:
  [32m+[0m create[0m

Terraform will perform the following actions:

[1m  # azurerm_container_registry.acr[0m will be created
[0m  [32m+[0m[0m resource "azurerm_container_registry" "acr" {
      [32m+[0m[0m admin_enabled                 = false
      [32m+[0m[0m admin_password                = (sensitive value)
      [32m+[0m[0m admin_username                = (known after apply)
      [32m+[0m[0m encryption                    = (known after apply)
      [32m+[0m[0m georeplication_locations      = (known after apply)
      [32m+[0m[0m georeplications               = (known after apply)
      [32m+[0m[0m id                            = (known after apply)
      [32m+[0m[0m location                      = "northeurope"
      [32m+[0m[0m login_server                  = (known after apply)
      [32m+[0m[0m name                          = "tpgldevopsacr"
      [32m+[0m[0m network_rule_set              = (known after apply)
      [32m+[0m[0m public_network_access_enabled = true
      [32m+[0m[0m resource_group_name           = "aks_terraform_rg"
      [32m+[0m[0m retention_policy              = (known after apply)
      [32m+[0m[0m sku                           = "Standard"
      [32m+[0m[0m trust_policy                  = (known after apply)
      [32m+[0m[0m zone_redundancy_enabled       = false
    }

[1m  # azurerm_kubernetes_cluster.aks[0m will be created
[0m  [32m+[0m[0m resource "azurerm_kubernetes_cluster" "aks" {
      [32m+[0m[0m dns_prefix                          = "terraform-aks"
      [32m+[0m[0m fqdn                                = (known after apply)
      [32m+[0m[0m id                                  = (known after apply)
      [32m+[0m[0m kube_admin_config                   = (known after apply)
      [32m+[0m[0m kube_admin_config_raw               = (sensitive value)
      [32m+[0m[0m kube_config                         = (known after apply)
      [32m+[0m[0m kube_config_raw                     = (sensitive value)
      [32m+[0m[0m kubernetes_version                  = "1.28.0"
      [32m+[0m[0m location                            = "northeurope"
      [32m+[0m[0m name                                = "terraform-aks"
      [32m+[0m[0m node_resource_group                 = (known after apply)
      [32m+[0m[0m private_cluster_enabled             = (known after apply)
      [32m+[0m[0m private_cluster_public_fqdn_enabled = false
      [32m+[0m[0m private_dns_zone_id                 = (known after apply)
      [32m+[0m[0m private_fqdn                        = (known after apply)
      [32m+[0m[0m private_link_enabled                = (known after apply)
      [32m+[0m[0m resource_group_name                 = "aks_terraform_rg"
      [32m+[0m[0m sku_tier                            = "Free"

      [32m+[0m[0m default_node_pool {
          [32m+[0m[0m enable_auto_scaling  = false
          [32m+[0m[0m kubelet_disk_type    = (known after apply)
          [32m+[0m[0m max_pods             = (known after apply)
          [32m+[0m[0m name                 = "system"
          [32m+[0m[0m node_count           = 2
          [32m+[0m[0m node_labels          = (known after apply)
          [32m+[0m[0m orchestrator_version = (known after apply)
          [32m+[0m[0m os_disk_size_gb      = (known after apply)
          [32m+[0m[0m os_disk_type         = "Managed"
          [32m+[0m[0m os_sku               = (known after apply)
          [32m+[0m[0m type                 = "VirtualMachineScaleSets"
          [32m+[0m[0m ultra_ssd_enabled    = false
          [32m+[0m[0m vm_size              = "Standard_D2s_v3"
        }

      [32m+[0m[0m identity {
          [32m+[0m[0m principal_id = (known after apply)
          [32m+[0m[0m tenant_id    = (known after apply)
          [32m+[0m[0m type         = "SystemAssigned"
        }

      [32m+[0m[0m network_profile {
          [32m+[0m[0m dns_service_ip     = (known after apply)
          [32m+[0m[0m docker_bridge_cidr = (known after apply)
          [32m+[0m[0m load_balancer_sku  = "Standard"
          [32m+[0m[0m network_mode       = (known after apply)
          [32m+[0m[0m network_plugin     = "kubenet"
          [32m+[0m[0m network_policy     = (known after apply)
          [32m+[0m[0m outbound_type      = "loadBalancer"
          [32m+[0m[0m pod_cidr           = (known after apply)
          [32m+[0m[0m service_cidr       = (known after apply)
        }
    }

[1m  # azurerm_role_assignment.role_acrpull[0m will be created
[0m  [32m+[0m[0m resource "azurerm_role_assignment" "role_acrpull" {
      [32m+[0m[0m id                               = (known after apply)
      [32m+[0m[0m name                             = (known after apply)
      [32m+[0m[0m principal_id                     = (known after apply)
      [32m+[0m[0m principal_type                   = (known after apply)
      [32m+[0m[0m role_definition_id               = (known after apply)
      [32m+[0m[0m role_definition_name             = "AcrPull"
      [32m+[0m[0m scope                            = (known after apply)
      [32m+[0m[0m skip_service_principal_aad_check = true
    }

[1mPlan:[0m 3 to add, 0 to change, 0 to destroy.
[0m
Changes to Outputs:
  [32m+[0m[0m acr_id           = (known after apply)
  [32m+[0m[0m acr_login_server = (known after apply)
  [32m+[0m[0m aks_fqdn         = (known after apply)
  [32m+[0m[0m aks_id           = (known after apply)
  [32m+[0m[0m aks_node_rg      = (known after apply)
[90m
â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€[0m

Saved the plan to: tfplan

To perform exactly these actions, run the following command to apply:
    terraform apply "tfplan"

Terraform used the selected providers to generate the following execution
plan. Resource actions are indicated with the following symbols:
  [32m+[0m create[0m

Terraform will perform the following actions:

[1m  # azurerm_container_registry.acr[0m will be created
[0m  [32m+[0m[0m resource "azurerm_container_registry" "acr" {
      [32m+[0m[0m admin_enabled                 = false
      [32m+[0m[0m admin_password                = (sensitive value)
      [32m+[0m[0m admin_username                = (known after apply)
      [32m+[0m[0m encryption                    = (known after apply)
      [32m+[0m[0m georeplication_locations      = (known after apply)
      [32m+[0m[0m georeplications               = (known after apply)
      [32m+[0m[0m id                            = (known after apply)
      [32m+[0m[0m location                      = "northeurope"
      [32m+[0m[0m login_server                  = (known after apply)
      [32m+[0m[0m name                          = "tpgldevopsacr"
      [32m+[0m[0m network_rule_set              = (known after apply)
      [32m+[0m[0m public_network_access_enabled = true
      [32m+[0m[0m resource_group_name           = "aks_terraform_rg"
      [32m+[0m[0m retention_policy              = (known after apply)
      [32m+[0m[0m sku                           = "Standard"
      [32m+[0m[0m trust_policy                  = (known after apply)
      [32m+[0m[0m zone_redundancy_enabled       = false
    }

[1m  # azurerm_kubernetes_cluster.aks[0m will be created
[0m  [32m+[0m[0m resource "azurerm_kubernetes_cluster" "aks" {
      [32m+[0m[0m dns_prefix                          = "terraform-aks"
      [32m+[0m[0m fqdn                                = (known after apply)
      [32m+[0m[0m id                                  = (known after apply)
      [32m+[0m[0m kube_admin_config                   = (known after apply)
      [32m+[0m[0m kube_admin_config_raw               = (sensitive value)
      [32m+[0m[0m kube_config                         = (known after apply)
      [32m+[0m[0m kube_config_raw                     = (sensitive value)
      [32m+[0m[0m kubernetes_version                  = "1.28.0"
      [32m+[0m[0m location                            = "northeurope"
      [32m+[0m[0m name                                = "terraform-aks"
      [32m+[0m[0m node_resource_group                 = (known after apply)
      [32m+[0m[0m private_cluster_enabled             = (known after apply)
      [32m+[0m[0m private_cluster_public_fqdn_enabled = false
      [32m+[0m[0m private_dns_zone_id                 = (known after apply)
      [32m+[0m[0m private_fqdn                        = (known after apply)
      [32m+[0m[0m private_link_enabled                = (known after apply)
      [32m+[0m[0m resource_group_name                 = "aks_terraform_rg"
      [32m+[0m[0m sku_tier                            = "Free"

      [32m+[0m[0m default_node_pool {
          [32m+[0m[0m enable_auto_scaling  = false
          [32m+[0m[0m kubelet_disk_type    = (known after apply)
          [32m+[0m[0m max_pods             = (known after apply)
          [32m+[0m[0m name                 = "system"
          [32m+[0m[0m node_count           = 2
          [32m+[0m[0m node_labels          = (known after apply)
          [32m+[0m[0m orchestrator_version = (known after apply)
          [32m+[0m[0m os_disk_size_gb      = (known after apply)
          [32m+[0m[0m os_disk_type         = "Managed"
          [32m+[0m[0m os_sku               = (known after apply)
          [32m+[0m[0m type                 = "VirtualMachineScaleSets"
          [32m+[0m[0m ultra_ssd_enabled    = false
          [32m+[0m[0m vm_size              = "Standard_D2s_v3"
        }

      [32m+[0m[0m identity {
          [32m+[0m[0m principal_id = (known after apply)
          [32m+[0m[0m tenant_id    = (known after apply)
          [32m+[0m[0m type         = "SystemAssigned"
        }

      [32m+[0m[0m network_profile {
          [32m+[0m[0m dns_service_ip     = (known after apply)
          [32m+[0m[0m docker_bridge_cidr = (known after apply)
          [32m+[0m[0m load_balancer_sku  = "Standard"
          [32m+[0m[0m network_mode       = (known after apply)
          [32m+[0m[0m network_plugin     = "kubenet"
          [32m+[0m[0m network_policy     = (known after apply)
          [32m+[0m[0m outbound_type      = "loadBalancer"
          [32m+[0m[0m pod_cidr           = (known after apply)
          [32m+[0m[0m service_cidr       = (known after apply)
        }
    }

[1m  # azurerm_resource_group.rg[0m will be created
[0m  [32m+[0m[0m resource "azurerm_resource_group" "rg" {
      [32m+[0m[0m id       = (known after apply)
      [32m+[0m[0m location = "northeurope"
      [32m+[0m[0m name     = "aks_terraform_rg"
    }

[1m  # azurerm_role_assignment.role_acrpull[0m will be created
[0m  [32m+[0m[0m resource "azurerm_role_assignment" "role_acrpull" {
      [32m+[0m[0m id                               = (known after apply)
      [32m+[0m[0m name                             = (known after apply)
      [32m+[0m[0m principal_id                     = (known after apply)
      [32m+[0m[0m principal_type                   = (known after apply)
      [32m+[0m[0m role_definition_id               = (known after apply)
      [32m+[0m[0m role_definition_name             = "AcrPull"
      [32m+[0m[0m scope                            = (known after apply)
      [32m+[0m[0m skip_service_principal_aad_check = true
    }

[1mPlan:[0m 4 to add, 0 to change, 0 to destroy.
[0m
Changes to Outputs:
  [32m+[0m[0m acr_id           = (known after apply)
  [32m+[0m[0m acr_login_server = (known after apply)
  [32m+[0m[0m aks_fqdn         = (known after apply)
  [32m+[0m[0m aks_id           = (known after apply)
  [32m+[0m[0m aks_node_rg      = (known after apply)
[90m
â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€[0m

Saved the plan to: tfplan

To perform exactly these actions, run the following command to apply:
    terraform apply "tfplan"
