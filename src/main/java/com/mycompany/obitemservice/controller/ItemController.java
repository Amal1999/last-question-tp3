package com.mycompany.obitemservice.controller;

import com.mycompany.obitemservice.model.Item;
import com.mycompany.obitemservice.repository.ItemRepository;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.servlet.support.ServletUriComponentsBuilder;

import java.net.URI;
import java.util.List;

@Controller
@RequestMapping()
public class ItemController {

    @Autowired
    private ItemRepository itemRepository;

    String categoryId;

    @GetMapping("/items")
    public List<Item> getAllItems() {
        return itemRepository.findAll();
    }

    @GetMapping("/items/{categoryId}")
    public String getItemsByCategory(Model model, @PathVariable String categoryId) {
        List<Item> items = itemRepository.findByCategoryId(categoryId);
        this.categoryId = categoryId;
        model.addAttribute("items", items);
        model.addAttribute("item", new Item());
        return "items";
    }


    @PostMapping("/items")
    public String saveItem(Item item) {
        item.setCategoryId(this.categoryId);
        Item savedItem = itemRepository.insert(item);
        return "redirect:/items/"+ this.categoryId;
    }

    @PostMapping("/items/{id}/edit")//full update of all properties
    public String updateItem(@PathVariable String id,Item item) {
        item.setCategoryId(this.categoryId);
        Item imFromDB = itemRepository.findById(id).orElseThrow(()->new RuntimeException("Cannot Find Item By ID: " + id));
        BeanUtils.copyProperties(item, imFromDB);
        imFromDB = itemRepository.save(imFromDB);
        return "redirect:/items/"+this.categoryId;
    }

    @PatchMapping("/items/{id}")//only update price keep other fields as old values
    public ResponseEntity<Item> updateItemPrice(@PathVariable String id, @RequestBody Item item) {
        Item imFromDB = itemRepository.findById(id).orElseThrow(()->new RuntimeException("Cannot Find Item By ID: " + id));
        imFromDB.setPrice(item.getPrice());
        imFromDB = itemRepository.save(imFromDB);//if request has id than it will update else it will insert new document with new autogenerated id
        return new ResponseEntity<>(imFromDB, HttpStatus.OK);
    }

    @GetMapping("/items/{id}/delete")
    public String deleteItem(@PathVariable String id) {
        itemRepository.deleteById(id);
        return "redirect:/items/"+this.categoryId;
    }
}
