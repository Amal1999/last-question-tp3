package com.mycompany.obitemservice.controller;

import com.mycompany.obitemservice.model.ItemCategory;
import com.mycompany.obitemservice.repository.ItemCategoryRepository;
import com.mycompany.obitemservice.repository.ItemRepository;
import jdk.jfr.Category;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.servlet.support.ServletUriComponentsBuilder;

import java.net.URI;
import java.util.List;

@Controller
@RequestMapping()
public class ItemCategoryController {

    @Autowired
    private ItemCategoryRepository itemCategoryRepository;
    @Autowired
    private ItemRepository itemRepository;

    @GetMapping()
    public String viewHomePage(Model model) {
        List<ItemCategory> categories = itemCategoryRepository.findAll();
        model.addAttribute("categories", categories);
        model.addAttribute("category", new ItemCategory());
        return "categories";
    }

    @GetMapping("/categories1")
    public List<ItemCategory> getAllItemCategory() {
        return itemCategoryRepository.findAll();
    }

    @GetMapping("/categories/{id}")
    public ItemCategory getItemCategory(@PathVariable String id) {
        return itemCategoryRepository.findById(id).orElseThrow(() -> new RuntimeException("Cannot Find Item Category By ID: " + id));
    }

    @PostMapping(value = "/categories")
    public String saveItemCategory(ItemCategory category) {
        ItemCategory savedItem = itemCategoryRepository.insert(category);//it will create new document in table with autogenerated id, if id exist than exception in is thrown
        URI uri = ServletUriComponentsBuilder.fromCurrentRequest()
                .path("/{id}")
                .buildAndExpand(savedItem.getId())
                .toUri();
        //http://localhost:8081/api/v1/categories/611b7bcfef59e87f2e0e0d60
//        return ResponseEntity.created(uri).build();
        return "redirect:/";
    }

    @PutMapping("/categories/{id}")
    public ResponseEntity<ItemCategory> updateItemCategory(@PathVariable String id, @RequestBody ItemCategory item) {
        ItemCategory imFromDB = itemCategoryRepository.findById(id).orElseThrow(()->new RuntimeException("Cannot Find Item Category By ID: " + id));
        BeanUtils.copyProperties(item, imFromDB);//copy all data from item to imFromDB
        imFromDB = itemCategoryRepository.save(imFromDB);//if request has id than it will update else it will insert new document with new autogenerated id
        return new ResponseEntity<>(imFromDB, HttpStatus.OK);
    }

    @GetMapping("/categories/{id}/delete")
    public String deleteItemCategory(@PathVariable String id, Model model) {
        //List<ItemModel> itemModels = itemRepository.findAllByCategoryId(id);
        itemRepository.deleteAllByCategoryId(id);
        itemCategoryRepository.deleteById(id);
//        ResponseEntity<String> re = new ResponseEntity<>(id, HttpStatus.OK);
        return "redirect:/";
    }
}
